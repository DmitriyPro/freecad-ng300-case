import Part
from FreeCAD import Base;

# Sodaniye of the document with a name
document = App.newDocument('FreeCAD filler test')

class Box():
    """My box with batteries"""

    def __init__(self, batteryWidth, batteryDepth,
                 batteryHeight, row_betweenBattery,
                 boxThickness, additionalHeight,
                 rotation, x, y, z):
        
        self.batteryWidth = batteryWidth
        self.batteryDepth = batteryDepth 
        self.batteryHeight = batteryHeight 
        self.row_betweenBattery = row_betweenBattery 
        self.boxThickness = boxThickness 
        self.additionalHeight = additionalHeight 
        self.rotation = rotation 
        self.x, y, z = x, y, z

        # Left wall of a box (x, y, z)
        wallLeftWidth = float(boxThickness)                     # Width (x)
        wallLeftDepth = float((5*(batteryDepth) +
                        row_betweenBattery*6)
                        )                                       # Depth  (y)
        wallLeftHeight = float(batteryHeight+additionalHeight)  # Height (z)

        # Coordinates of the left wall of a box (x, y, z)
        LeftWall_X = float((-batteryWidth - 
                     2*row_betweenBattery -
                     boxThickness)
                     )
        LeftWall_Y = float(- row_betweenBattery)
        LeftWall_Z = float(0.0)

        # Form of the left wall of a box
        boxShapeLTh = Part.makeBox(wallLeftWidth, wallLeftDepth,
                      wallLeftHeight, Base.Vector(LeftWall_X,
                      LeftWall_Y, LeftWall_Z)
                      )

        # Turn of the left wall of a box
        boxShapeLTh.rotate (Vector ((-batteryWidth -
                           2*row_betweenBattery -
                           boxThickness),(- row_betweenBattery),0),
                           Vector (z,y,x), rotation)

        # Object for display of the form
        box = document.addObject('Part::Feature', 'Box')
        box.Shape = boxShapeLTh

        # Right wall of a box (x, y, z)
        wallRightWidth = float(boxThickness)                    # Width (x)
        wallRightDepth = float((5*(batteryDepth) +
                         row_betweenBattery*6)
                         )                                      # Depth (y)
        wallRightHeight = float((batteryHeight +
                          additionalHeight)
                          )                                     # Height (z)

        # Coordinates of the right wall of a box (x, y, z)
        RightWall_X = float(batteryWidth+row_betweenBattery)
        RightWall_Y = float(- row_betweenBattery)
        RightWall_Z = float(0.0)

        # Form of the right wall of a box
        boxShapeRTh = Part.makeBox(wallRightWidth, wallRightDepth, 
                      wallRightHeight, Base.Vector
                      (RightWall_X, RightWall_Y, RightWall_Z)
                      )

        # Turn of the right wall of a box
        boxShapeRTh.rotate (Vector ((-batteryWidth - 
                           2*row_betweenBattery -
                           boxThickness),(-row_betweenBattery),0),
                           Vector (z,y,x), rotation)

        # Object for display of the form
        box = document.addObject('Part::Feature', 'Box')
        box.Shape = boxShapeRTh

        # Front face of a box (x, y, z)
        wallAnteriortWidth = float((2*batteryWidth +
                             row_betweenBattery *
                             3 + 2*boxThickness)
                             )                                  # Width (x)
        wallAnteriortDepth = float(boxThickness)                # Depth (y)
        wallAnteriortHeight = float((batteryHeight +
                              additionalHeight)
                              )                                 # Height (z)

        # Coordinates of a front wall of a box (x, y, z)
        AnteriortWall_X = float((-batteryWidth - 
                          2*row_betweenBattery -
                          boxThickness)
                          )
        AnteriortWall_Y = float((- row_betweenBattery -
                          boxThickness)
                          )
        AnteriortWall_Z = float(0.0)

        # Form of a front wall of a box
        boxShapeATh = Part.makeBox(wallAnteriortWidth,
                      wallAnteriortDepth, wallAnteriortHeight,
                      Base.Vector(AnteriortWall_X,
                      AnteriortWall_Y,
                      AnteriortWall_Z)
                      )

        # Turn of a front wall of a box
        boxShapeATh.rotate (Vector ((- batteryWidth -
                           2*row_betweenBattery -
                           boxThickness),(- row_betweenBattery),0),
                           Vector (z,y,x), rotation)

        # Object for display of the form
        box = document.addObject('Part::Feature', 'Box')
        box.Shape = boxShapeATh

        # Back face of a box (x, y, z)
        wallPosteriorWidth = float((2*batteryWidth +
                             row_betweenBattery*3 +
                             2*boxThickness)
                             )                                   # Width (x)
        wallPosteriorDepth = float(boxThickness)                 # Depth (y)
        wallPosteriorHeight = float((batteryHeight +
                              additionalHeight)
                              )                                  # Height (z)

        # Coordinates of a back wall of a box (x, y, z)
        PosteriorWall_X = float((-batteryWidth -
                          2*row_betweenBattery -
                          boxThickness)
                          )
        PosteriorWall_Y = float((5*row_betweenBattery + 
                          5*batteryDepth)
                          )

        # Form of a back wall of a box
        boxShapePTh = Part.makeBox(wallPosteriorWidth,
                      wallPosteriorDepth, wallPosteriorHeight,
                      Base.Vector(PosteriorWall_X,
                      PosteriorWall_Y, PosteriorWall_Z)
                      )

        # Turn of a back wall of a box
        boxShapePTh.rotate (Vector ((-batteryWidth - 
                           2*row_betweenBattery -
                           boxThickness),(-row_betweenBattery),0),
                           Vector (z,y,x), rotation)

        # Object for display of the form
        box = document.addObject('Part::Feature', 'Box')
        box.Shape = boxShapePTh

        # Lower side of a box (x, y, z)
        wallLowerWidth = float((2*batteryWidth +
                         row_betweenBattery*3 +
                         2*boxThickness)
                         )                                         # Width (x)
        wallLowerDepth = float(6*row_betweenBattery + 
                         + 5*batteryDepth + 2*boxThickness
                         )                                         # Depth (y)
        wallLowerHeight = float(boxThickness)                      # Height (z)

        # Coordinates of the lower wall of a box (x, y, z)
        LowerWall_X = float((-batteryWidth - 
                      2*row_betweenBattery-
                      boxThickness)
                      )
        LowerWall_Y = float((-row_betweenBattery-
                      boxThickness)
                      )
        LowerWall_Z = float(-boxThickness)

        # Form of the lower wall of a box
        boxShapeLoTh = Part.makeBox(wallLowerWidth, 
                       wallLowerDepth, wallLowerHeight, 
                       Base.Vector(LowerWall_X, 
                       LowerWall_Y, LowerWall_Z)
                       )

        # Turn of the lower wall of a box
        boxShapeLoTh.rotate (Vector ((-batteryWidth - 
                            2*row_betweenBattery-
                            boxThickness),(-row_betweenBattery),0),
                            Vector (z,y,x), rotation)

        # Object for display of the form 
        box = document.addObject('Part::Feature', 'Box')
        box.Shape = boxShapeLoTh

        # Layouts of a cube for the 1st row  (x,y,z)
        row1_cubeLocation_X = float(0.0)                           # Width (x)
        row1_cubeLocation_Y = float(batteryDepth)                  # Depth (y)
        row1_cubeLocation_Z = float(0.0)                           # Height (z)

        # Layouts of a cube for the 2nd row (x, y, z)
        row2_cubeLocation_X = float((-batteryWidth-
                              row_betweenBattery)
                              )                                    # Width (x)
        row2_cubeLocation_Y = float(batteryDepth)                  # Depth (y)
        row2_cubeLocation_Z = float(0.0)                           # Height (z)

        # Form of a cube of the 1st row (1)
        boxShape_1_1 = Part.makeBox(batteryWidth,
                       batteryDepth, batteryHeight, 
                       Base.Vector(0, 0, 0)
                       )

        # Turn of a cube of the 1st row, the 2nd cube
        boxShape_1_1.rotate (Vector ((-batteryWidth - 
                            2*row_betweenBattery -
                            boxThickness),(-row_betweenBattery),0),
                            Vector (z,y,x), rotation)

        # Object for display of the form
        box = document.addObject('Part::Feature', 'Box')
        box.Shape = boxShape_1_1

        # Form of a cube of the 1st row (2)
        boxShape_1_2 = Part.makeBox(batteryWidth, batteryDepth, 
                       batteryHeight, Base.Vector
                       (row1_cubeLocation_X, row1_cubeLocation_Y+
                       row_betweenBattery, row1_cubeLocation_Z)
                       )

        # Turn of a cube of the 1st row, the 2nd cube
        boxShape_1_2.rotate (Vector ((-batteryWidth - 
                            2*row_betweenBattery-
                            boxThickness),(-row_betweenBattery),0),
                            Vector (z,y,x), rotation)

        # Object for display of the form
        box = document.addObject('Part::Feature', 'Box')
        box.Shape = boxShape_1_2

        # Form of a cube of the 1st row (3)
        boxShape_1_3 = Part.makeBox(batteryWidth, batteryDepth, 
                       batteryHeight, Base.Vector(row1_cubeLocation_X, 
                       2*(row1_cubeLocation_Y)+row_betweenBattery*2, 
                       row1_cubeLocation_Z)
                       )

        # Turn of a cube of the 1st row, the 3rd cube
        boxShape_1_3.rotate (Vector ((-batteryWidth - 
                            2*row_betweenBattery-
                            boxThickness),(-row_betweenBattery),0),
                            Vector (z,y,x), rotation)

        # Object for display of the form
        box = document.addObject('Part::Feature', 'Box')
        box.Shape = boxShape_1_3

        # Form of a cube of the 1st row (4)
        boxShape_1_4 = Part.makeBox(batteryWidth, batteryDepth, 
                       batteryHeight, Base.Vector(row1_cubeLocation_X, 
                       3*(row1_cubeLocation_Y)+row_betweenBattery*3, 
                       row1_cubeLocation_Z)
                       )

        # Turn of a cube of the 1st row, the 4th cube
        boxShape_1_4.rotate (Vector ((-batteryWidth - 
                            2*row_betweenBattery-
                            boxThickness),(-row_betweenBattery),0),
                            Vector (z,y,x), rotation)

        # Object for display of the form
        box = document.addObject('Part::Feature', 'Box')
        box.Shape = boxShape_1_4

        # Form of a cube of the 1st row (5)
        boxShape_1_5 = Part.makeBox(batteryWidth, batteryDepth, 
                       batteryHeight, Base.Vector(row1_cubeLocation_X, 
                       4*(row1_cubeLocation_Y)+row_betweenBattery*4, 
                       row1_cubeLocation_Z)
                       )

        # Turn of a cube of the 1st row, the 5th cube
        boxShape_1_5.rotate (Vector ((-batteryWidth - 
                            2*row_betweenBattery-
                            boxThickness),(-row_betweenBattery),0),
                            Vector (z,y,x), rotation)

        # Object for display of the form
        box = document.addObject('Part::Feature', 'Box')
        box.Shape = boxShape_1_5

        # Form of a cube of the 2nd row (1)
        boxShape_2_1 = Part.makeBox(batteryWidth, batteryDepth, 
                       batteryHeight, Base.Vector
                       (row2_cubeLocation_X, 0, 0)
                       )
        
        # Turn of a cube of the 2nd row, the 1st cube
        boxShape_2_1.rotate (Vector ((-batteryWidth - 
                            2*row_betweenBattery-
                            boxThickness),(-row_betweenBattery),0),
                            Vector (z,y,x), rotation)

        # Object for display of the form
        box = document.addObject('Part::Feature', 'Box')
        box.Shape = boxShape_2_1

        # Form of a cube of the 2nd row (2)
        boxShape_2_2 = Part.makeBox(batteryWidth, batteryDepth, 
                       batteryHeight, Base.Vector(row2_cubeLocation_X, 
                       row1_cubeLocation_Y+row_betweenBattery,
                       row1_cubeLocation_Z)
                       )

        # Turn of a cube of the 2nd row, the 2nd cube
        boxShape_2_2.rotate (Vector ((-batteryWidth - 
                            2*row_betweenBattery-
                            boxThickness),(-row_betweenBattery),0),
                            Vector (z,y,x), rotation)

        # Object for display of the form
        box = document.addObject('Part::Feature', 'Box')
        box.Shape = boxShape_2_2

        # Form of a cube of the 2nd row (3)
        boxShape_2_3 = Part.makeBox(batteryWidth, batteryDepth, 
                       batteryHeight, Base.Vector(row2_cubeLocation_X, 
                       2*(row1_cubeLocation_Y)+row_betweenBattery*2, 
                       row1_cubeLocation_Z)
                       )

        # Turn of a cube of the 2nd row, the 3rd cube
        boxShape_2_3.rotate (Vector ((-batteryWidth - 
                            2*row_betweenBattery-
                            boxThickness),(-row_betweenBattery),0),
                            Vector (z,y,x), rotation)

        # Object for display of the form
        box = document.addObject('Part::Feature', 'Box')
        box.Shape = boxShape_2_3

        # Form of a cube of the 2nd row (4)
        boxShape_2_4 = Part.makeBox(batteryWidth, batteryDepth, 
                       batteryHeight, Base.Vector(row2_cubeLocation_X, 
                       3*(row1_cubeLocation_Y)+row_betweenBattery*3, 
                       row1_cubeLocation_Z)
                       )

        # Turn of a cube of the 2nd row, the 4th cube
        boxShape_2_4.rotate (Vector ((-batteryWidth - 
                            2*row_betweenBattery-
                            boxThickness),(-row_betweenBattery),0),
                            Vector (z,y,x), rotation)

        # Object for display of the form
        box = document.addObject('Part::Feature', 'Box')
        box.Shape = boxShape_2_4

        # Form of a cube of the 2nd row (5)
        boxShape_2_5 = Part.makeBox(batteryWidth, batteryDepth, 
                       batteryHeight, Base.Vector(row2_cubeLocation_X, 
                       4*(row1_cubeLocation_Y)+row_betweenBattery*4, 
                       row1_cubeLocation_Z)
                       )

        # Turn of a cube of the 2nd row, the 5th cube
        boxShape_2_5.rotate (Vector ((-batteryWidth - 
                            2*row_betweenBattery-
                            boxThickness),(-row_betweenBattery),0),
                            Vector (z,y,x), rotation)

        # Object for display of the form
        box = document.addObject('Part::Feature', 'Box')
        box.Shape = boxShape_2_5

myBox = Box (93, 167, 485, 20, 50, 0, 0, 1, 0, 0)

# To switch to the most convenient look
Gui.SendMsgToActiveView("ViewFit")
Gui.activeDocument().activeView().viewAxonometric()

# It is repeted to draw the document
document.recompute()